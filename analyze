#!/usr/bin/env bash

set -euo pipefail

DEBUG="${DEBUG:-false}"
debug_log="debug.log"
objdump=$(command -v objdump)
ARCH="$($objdump -f ${1} | grep architecture | cut -d ':' -f3 | cut -d ',' -f1)"
objdump_args="--disassemble --decompress --section .text -M ${ARCH} --source --all-headers --wide"

# TODO: this syscall able is only for the host architecture.
# get the syscall table for the executable's architecture.
syscall_table=/usr/include/asm/unistd_64.h
# X86 64 and 32 bit system call instructions.
syscall_regex="^(syscall|sysenter)"

# This identifies an op on the accumulator. We look for the syscall identifier.
rax_mov_regex="^mov.+0x.+,%(r|e)ax$" 
# We look at mov to other general purpose registers for the syscall parameters.
params_mov_regex="^mov .+*,%((r|e)bx|(r|e)cx|(r|e)dx|(r|e)si|(r|e)di|(r|e)bp)$"

disassemble() {
	# Get only assembly opcode column from objdump.
	awk -F'\t' '{print $3}' \
		<($objdump $objdump_args "${1}")
}

# Get the immediate rax set op before syscalls.
get_syscall_rax() {
	#disassemble $1 | \
	#	grep -E -B20 "$syscall_regex" | 
	#	grep -E "mov|$syscall_regex" |# all mov ops before syscall op
	#	grep -B1 -E "$syscall_regex" |# only mov op just before syscall op
	#	grep -E "mov.+0x.+,%(r|e)ax" | 	# only mov to rax or eax (for 32-bit compat) reg 
	#	awk -F' ' '{print $2}' |	# print only the opcode column
	#	cut -d ',' -f1			# get only the value loaded to the rax/eax reg 
	awk "{
		if (found) {
			if (\$0 ~ /${rax_mov_regex}/) {
				print \$0
				found = 0
			}
		}
		prev = \$0
		if (\$0 ~ /${syscall_regex}/) {
			    found = 1
		}
	}" <(disassemble $1) | 
		awk -F' ' '{print $2}' |
		cut -d ',' -f1
}

# Get all syscall params from set registers
# rbx, rcx, rdx, rsi, rdi, rbp.
get_syscall_params() {
	#disassemble $1 | \
	#	grep -E -B10 "$syscall_regex" | 
	#	#grep -E "mov|$syscall_regex" |# all mov ops before syscall op
	#	#grep -B1 -E "$syscall_regex" |# only mov op just before syscall op
	#	grep -E "^($syscall_regex|mov.+*,%((r|e)bx|(r|e)cx|(r|e)dx|(r|e)si|(r|e)di|(r|e)bp))" # only mov to rbx,rcx,rdx regs and related lower 32-bit
	#	#awk -F' ' '{print $2}' |	# print only the opcode column
	#	#cut -d ',' -f1			# get only the value loaded to the rax/eax reg 
	awk "{
		if (found) {
			if (\$0 ~ /${params_mov_regex}/) {
				print \$0
			}
			if (\$0 ~ /${syscall_regex}/) {
				found = 0
				print \$0
			}
		}
		prev = \$0
		if (\$0 ~ /${syscall_regex}/) {
			    found = 1
		}
	}" <(disassemble $1)
}

get_syscalls() {
	# TODO: Literal values (e.g. mov $0xe4,%rax)
	# Get also register-relative values (e.g. mov 0x8(%rsp),%rax)
	local literal_args=$(get_syscall_rax $1 | grep -F "\$")

	for num in $literal_args; do
		id=$(hextodec $num)
		name=$(get_syscall_name $id);
		if [ -n "${name}" ]; then
			echo $name
		else
			echo "syscall $id not found"
		fi
	done
}

get_syscall_name() {
	if [ -z "${1}" ]; then
		echo ""
		return
	fi
	local table=$(grep -E "define __NR_.+ ${1}$" $syscall_table)
	awk '{print $2}' <(echo ${table//__NR_})
}

hextodec() {
	echo $(( 16#${1//[^0-9a-fA-F]/} ))
}

pretty_echo() {
	echo >&2 "--- ${1} ---"; echo
}

main() {
	if [ "${DEBUG}" == "true" ]; then
		pretty_echo "Generating debug information. Reference debug.txt for debug purposes."
		echo "get_syscall_rax" >$debug_log
		get_syscall_rax $1 >>$debug_log
		echo "get_syscall_params" >>$debug_log
		get_syscall_params $1 >>$debug_log
	fi
	get_syscalls $1
}

main $@
